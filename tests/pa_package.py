import unittest
import ctypes

import pypkgdepdb

class TestConfig(unittest.TestCase):
    def setUp(self):
        self.cfg = pypkgdepdb.Config()
    def tearDown(self):
        del self.cfg

    def MakeElf(self, dirname, basename,
                eclass=pypkgdepdb.ELF.CLASS64,
                edata=pypkgdepdb.ELF.DATA2LSB,
                eosabi=pypkgdepdb.ELF.OSABI_FREEBSD,
                rpath=None,
                runpath=None,
                interp=None):
        elf = pypkgdepdb.Elf()
        self.assertIsNotNone(elf)

        elf.dirname     = dirname
        elf.basename    = basename
        elf.ei_class    = eclass
        elf.ei_data     = edata
        elf.ei_osabi    = eosabi
        elf.rpath       = rpath
        elf.runpath     = runpath
        elf.interpreter = interp

        self.assertEqual(elf.dirname     , dirname)
        self.assertEqual(elf.basename    , basename)
        self.assertEqual(elf.ei_class    , eclass)
        self.assertEqual(elf.ei_data     , edata)
        self.assertEqual(elf.ei_osabi    , eosabi)
        self.assertEqual(elf.rpath       , rpath)
        self.assertEqual(elf.runpath     , runpath)
        self.assertEqual(elf.interpreter , interp)

        return elf

    def MakePkg(self, name, version, description,
                depends=[], optdepends=[], makedepends=[], checkdepends=[],
                conflicts=[], replaces=[], provides=[], pkgbase='',
                groups=[],
                check=False):
        pkg = pypkgdepdb.Package()
        self.assertIsNotNone(pkg)
        pkg.name        = name
        pkg.version     = version
        pkg.description = description
        pkg.pkgbase     = pkgbase
        self.assertEqual(pkg.name        , name)
        self.assertEqual(pkg.version     , version)
        self.assertEqual(pkg.description , description)
        self.assertEqual(pkg.pkgbase     , pkgbase)

        pkg.depends = depends
        if check:
            self.assertEqual(len(pkg.depends), len(depends))
            pkgdeps = pkg.depends
            for i in range(len(depends)):
                if type(depends[i]) == str:
                    self.assertEqual(pkgdeps[i][0], depends[i])
                    self.assertEqual(pkg.depends[i][0], depends[i])
                else:
                    self.assertEqual(pkgdeps[i], depends[i])
                    self.assertEqual(pkg.depends[i], depends[i])

        def filldeps(name, deps):
            getattr(pkg, name).extend(deps)
            if not check:
                return
            pkgdeps = getattr(pkg, name)
            self.assertEqual(len(pkgdeps), len(deps))
            for i in range(len(deps)):
                if type(deps[i]) == str:
                    self.assertEqual(pkgdeps[i][0], deps[i])
                else:
                    self.assertEqual(pkgdeps[i], deps[i])
        filldeps('optdepends',   optdepends)
        filldeps('makedepends',  makedepends)
        filldeps('checkdepends', checkdepends)
        filldeps('conflicts',    conflicts)
        filldeps('replaces',     replaces)
        filldeps('provides',     provides)

        pkg.groups.extend(groups)
        if check:
            self.assertEqual(len(pkg.groups), len(groups))
            pkggroups = pkg.groups
            for i in range(len(groups)):
                self.assertEqual(pkggroups[i], groups[i])
                self.assertEqual(pkg.groups[i], groups[i])
        return pkg

    def test_pkg(self):
        foo = self.MakePkg('foo', '1.0-1', 'foo package',
                           pkgbase='foobase',
                           depends=[('libc', '>=1.0'), 'bar1'],
                           optdepends=['bar2'],
                           makedepends=[('gcc','>=4.9'), 'make'],
                           checkdepends=['check'],
                           conflicts=['oldfoo'],
                           replaces=['oldfoo'],
                           provides=[('oldfoo', '=1.0')],
                           check=True)
        self.assertEqual(type(foo.makedepends[0]), tuple)

        oldfoo = self.MakePkg('oldfoo', '1.0-1', 'old foo package')
        oldfoo.guess('oldfoo-0.9-1-x86_64.pkg.tar.xz')
        self.assertEqual(oldfoo.version, '0.9-1')

        self.assertTrue (foo.conflicts_with(oldfoo))
        self.assertTrue (oldfoo.conflicts_with(foo))
        self.assertTrue (foo.replaces_package(oldfoo))
        self.assertFalse(oldfoo.replaces_package(foo))

        elf1 = self.MakeElf('/lib', 'lib1.so')
        elf2 = self.MakeElf('/lib', 'lib2.so')
        foo.elfs = [elf1, elf2]
        self.assertEqual(len(foo.elfs), 2)
        self.assertEqual(foo.elfs, [elf1, elf2])
        del elf1
        del elf2
        del foo.elfs[1]
        self.assertEqual(len(foo.elfs), 1)
        self.assertEqual(foo.elfs[0].basename, 'lib1.so')

    pkginfo1='''# Generated by hand
pkgname = libfoo
pkgbase = foobase
pkgver = 1.0-1
pkgdesc = test package
url = http://about:blank
builddate = 1411832227
packager = The test suite
size = 1024
size = 1025
arch = x86_64
license = BSD
conflict = foo
provides = foo=1.0
replaces = foo
depend = libc
depend = libbar1
optdepend = libbar2>1: for libbar
makedepend = make
checkdepend = check
group = base
group = devel
group = foogroup
'''

    def test_pkginfo(self):
        libfoo = pypkgdepdb.Package()
        self.assertIsNotNone(libfoo)
        libfoo.read_info(self.pkginfo1, self.cfg)
        self.assertEqual(libfoo.name,        'libfoo')
        self.assertEqual(libfoo.version,     '1.0-1')
        self.assertEqual(libfoo.pkgbase,     'foobase')
        self.assertEqual(libfoo.description, 'test package')
        self.assertEqual(list(libfoo.depends),      [('libc',''),
                                                     ('libbar1','')])
        self.assertEqual(list(libfoo.optdepends),   [('libbar2','>1')])
        self.assertEqual(list(libfoo.makedepends),  [('make','')])
        self.assertEqual(list(libfoo.checkdepends), [('check','')])
        self.assertEqual(list(libfoo.info['url']),       ['http://about:blank'])
        self.assertEqual(list(libfoo.info['builddate']), ['1411832227'])
        self.assertEqual(list(libfoo.info['packager']),  ['The test suite'])
        self.assertEqual(list(libfoo.info['size']),      ['1024', '1025'])
        self.assertEqual(list(libfoo.info['arch']),      ['x86_64'])
        self.assertEqual(list(libfoo.info['license']),   ['BSD'])
        self.assertEqual(list(libfoo.groups), ['base', 'devel', 'foogroup'])

if __name__ == '__main__':
    unittest.main()
